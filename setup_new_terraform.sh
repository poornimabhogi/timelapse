#!/bin/bash

# setup_new_terraform.sh - Script to set up a fresh Terraform deployment and update configurations
# Usage: ./setup_new_terraform.sh

set -e  # Exit on error

echo "🚀 Setting up new Terraform deployment and updating configurations..."

# Default values
AWS_REGION="us-east-1"
APP_NAME="timelapse"
ENV="dev"
TERRAFORM_DIR="./terraform"

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --region) AWS_REGION="$2"; shift ;;
        --app-name) APP_NAME="$2"; shift ;;
        --env) ENV="$2"; shift ;;
        --terraform-dir) TERRAFORM_DIR="$2"; shift ;;
        *) echo "Unknown parameter: $1"; exit 1 ;;
    esac
    shift
done

# Check if we're in a Python virtual environment
if [[ -z "${VIRTUAL_ENV}" ]]; then
  echo "⚠️ Not running in a Python virtual environment"
  echo "Creating a new virtual environment..."
  python3 -m venv env
  source env/bin/activate
  pip install boto3 python-dotenv
else
  echo "✅ Using Python virtual environment: ${VIRTUAL_ENV}"
fi

# Ensure AWS CLI is configured
if ! aws sts get-caller-identity &> /dev/null; then
  echo "❌ AWS CLI is not configured. Please run 'aws configure' first."
  exit 1
fi

echo "✅ AWS CLI is configured"

# Set proper AWS profile if needed
if [ -n "$AWS_PROFILE" ]; then
  echo "Using AWS Profile: $AWS_PROFILE"
fi

# Check if Terraform is installed
if ! command -v terraform &> /dev/null; then
  echo "❌ Terraform is not installed. Please install Terraform first."
  exit 1
fi

echo "✅ Terraform is installed"

# Navigate to Terraform directory
cd "$TERRAFORM_DIR"

# Initialize Terraform
echo "📦 Initializing Terraform..."
terraform init

# Apply Terraform changes
echo "🔨 Applying Terraform changes..."
terraform apply -auto-approve

# Get outputs
echo "📋 Getting Terraform outputs..."
TERRAFORM_OUTPUT=$(terraform output -json)

# Parse outputs if available
if [ -n "$TERRAFORM_OUTPUT" ]; then
  echo "Terraform outputs available, extracting values..."
  
  # Extract values using jq if available
  if command -v jq &> /dev/null; then
    USER_POOL_ID=$(echo $TERRAFORM_OUTPUT | jq -r '.cognito_user_pool_id.value // empty')
    APP_CLIENT_ID=$(echo $TERRAFORM_OUTPUT | jq -r '.cognito_app_client_id.value // empty')
    IDENTITY_POOL_ID=$(echo $TERRAFORM_OUTPUT | jq -r '.cognito_identity_pool_id.value // empty')
    S3_BUCKET=$(echo $TERRAFORM_OUTPUT | jq -r '.s3_bucket_name.value // empty')
    APPSYNC_ENDPOINT=$(echo $TERRAFORM_OUTPUT | jq -r '.appsync_graphql_endpoint.value // empty')
    
    # Check if we have all the values
    if [ -n "$USER_POOL_ID" ] && [ -n "$APP_CLIENT_ID" ] && [ -n "$IDENTITY_POOL_ID" ] && [ -n "$S3_BUCKET" ] && [ -n "$APPSYNC_ENDPOINT" ]; then
      echo "✅ Successfully extracted values from Terraform outputs"
      
      # Create .env file
      cd ..
      cat > .env << EOF
# AWS Configuration
REACT_APP_AWS_REGION=$AWS_REGION
REACT_APP_COGNITO_USER_POOL_ID=$USER_POOL_ID
REACT_APP_COGNITO_APP_CLIENT_ID=$APP_CLIENT_ID
REACT_APP_COGNITO_IDENTITY_POOL_ID=$IDENTITY_POOL_ID
REACT_APP_S3_BUCKET_NAME=$S3_BUCKET
REACT_APP_GRAPHQL_ENDPOINT=$APPSYNC_ENDPOINT
REACT_APP_ENVIRONMENT=$ENV
EOF
      
      # Create aws-exports.js
      mkdir -p src
      cat > src/aws-exports.js << EOF
/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by setup_new_terraform.sh
// This file was generated on $(date)

const awsmobile = {
    "aws_project_region": "$AWS_REGION",
    "aws_cognito_identity_pool_id": "$IDENTITY_POOL_ID",
    "aws_cognito_region": "$AWS_REGION",
    "aws_user_pools_id": "$USER_POOL_ID",
    "aws_user_pools_web_client_id": "$APP_CLIENT_ID",
    "oauth": {},
    "aws_appsync_graphqlEndpoint": "$APPSYNC_ENDPOINT",
    "aws_appsync_region": "$AWS_REGION",
    "aws_appsync_authenticationType": "AMAZON_COGNITO_USER_POOLS",
    "aws_user_files_s3_bucket": "$S3_BUCKET",
    "aws_user_files_s3_bucket_region": "$AWS_REGION"
};

export default awsmobile;
EOF
      echo "✅ Created .env file"
      echo "✅ Created aws-exports.js file"
    else
      echo "⚠️ Some values are missing from Terraform outputs, falling back to discovery script"
      USE_DISCOVERY=true
    fi
  else
    echo "⚠️ jq is not installed, falling back to discovery script"
    USE_DISCOVERY=true
  fi
else
  echo "⚠️ No Terraform outputs available, falling back to discovery script"
  USE_DISCOVERY=true
fi

# Use discovery script if necessary
if [ "$USE_DISCOVERY" = true ]; then
  cd ..
  echo "🔍 Running AWS resource discovery script..."
  python scripts/update_aws_config.py --app-name "$APP_NAME" --region "$AWS_REGION" --verbose
fi

echo "🎉 Setup complete!"
echo "You can now run your application with the new AWS resources." 