type User {
  id: ID!
  username: String!
  name: String
  bio: String
  avatar: String
  followers: [Follow]
  following: [Follow]
  posts: [Post]
  timelapses: [Timelapse]
  createdAt: String
}

type Follow {
  id: ID!
  follower: User!
  following: User!
  createdAt: String
}

type Post {
  id: ID!
  content: String
  media: String
  author: User!
  likes: Int
  comments: [Comment]
  createdAt: String
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  createdAt: String
}

type Timelapse {
  id: ID!
  title: String
  description: String
  creator: User!
  videoUrl: String
  thumbnailUrl: String
  tags: [String]
  likes: Int
  views: Int
  createdAt: String
}

type TimelapseItem @model 
  @key(name: "byUser", fields: ["userId", "createdAt"], queryField: "timelapseItemsByUser") {
  id: ID!
  userId: ID!
  mediaUrl: String!
  type: String!
  createdAt: AWSTimestamp!
  description: String
  likes: Int!
  likedBy: [String]
  duration: Int
}

type Query {
  getUser(id: ID!): User
  getUserByUsername(username: String!): User
  listUsers: [User]
  getPost(id: ID!): Post
  listPosts: [Post]
  listPostsByUser(userId: ID!): [Post]
  getTimelapse(id: ID!): Timelapse
  listTimelapses: [Timelapse]
  listTimelapsesByUser(userId: ID!): [Timelapse]
  getFollowers(userId: ID!): [User]
  getFollowing(userId: ID!): [User]
  listFollowedPosts(userId: ID!, limit: Int, nextToken: String): [Post]
  listTimelapseItems(userId: ID, limit: Int, nextToken: String): TimelapseItemConnection
}

type TimelapseItemConnection {
  items: [TimelapseItem]
  nextToken: String
}

type Mutation {
  createUser(username: String!, name: String, bio: String, avatar: String): User
  updateUser(id: ID!, username: String, name: String, bio: String, avatar: String): User
  deleteUser(id: ID!): Boolean
  
  followUser(followerId: ID!, followingId: ID!): Follow
  unfollowUser(followerId: ID!, followingId: ID!): Boolean
  
  createPost(authorId: ID!, content: String, media: String): Post
  updatePost(id: ID!, content: String, media: String): Post
  deletePost(id: ID!): Boolean
  likePost(id: ID!): Post
  
  createComment(postId: ID!, authorId: ID!, content: String!): Comment
  updateComment(id: ID!, content: String!): Comment
  deleteComment(id: ID!): Boolean
  
  createTimelapse(creatorId: ID!, title: String, description: String, videoUrl: String, thumbnailUrl: String, tags: [String]): Timelapse
  updateTimelapse(id: ID!, title: String, description: String, videoUrl: String, thumbnailUrl: String, tags: [String]): Timelapse
  deleteTimelapse(id: ID!): Boolean
  likeTimelapse(id: ID!): Timelapse
  viewTimelapse(id: ID!): Timelapse
  
  # Generate a presigned URL for S3 uploads
  generatePresignedUrl(fileName: String!, fileType: String!): PresignedUrlResponse
  createTimelapseItem(input: CreateTimelapseItemInput!): TimelapseItem
  updateTimelapseItem(input: UpdateTimelapseItemInput!): TimelapseItem
  deleteTimelapseItem(input: DeleteTimelapseItemInput!): TimelapseItem
}

# Response type for presigned URL generation
type PresignedUrlResponse {
  uploadUrl: String!
  fileUrl: String!
  key: String!
}

input CreateTimelapseItemInput {
  userId: ID!
  mediaUrl: String!
  type: String!
  createdAt: AWSTimestamp!
  description: String
  likes: Int!
  likedBy: [String]
  duration: Int
}

input UpdateTimelapseItemInput {
  id: ID!
  likes: Int
  likedBy: [String]
  description: String
}

input DeleteTimelapseItemInput {
  id: ID!
}

extend type Subscription {
  onCreateTimelapseItem(userId: ID): TimelapseItem
    @aws_subscribe(mutations: ["createTimelapseItem"])
}

schema {
  query: Query
  mutation: Mutation
} 