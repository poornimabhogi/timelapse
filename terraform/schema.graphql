type User {
  id: ID!
  username: String!
  name: String
  bio: String
  avatar: String
  followers: [Follow]
  following: [Follow]
  posts: [Post]
  timelapses: [Timelapse]
  createdAt: String
}

type Follow {
  id: ID!
  follower: User!
  following: User!
  createdAt: String
}

type Post {
  id: ID!
  content: String
  media: String
  author: User!
  likes: Int
  comments: [Comment]
  createdAt: String
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  createdAt: String
}

type Timelapse {
  id: ID!
  title: String
  description: String
  creator: User!
  videoUrl: String
  thumbnailUrl: String
  tags: [String]
  likes: Int
  views: Int
  createdAt: String
}

type TimelapseItem @model 
  @key(name: "byUser", fields: ["userId", "createdAt"], queryField: "timelapseItemsByUser") {
  id: ID!
  userId: ID!
  mediaUrl: String!
  type: String!
  createdAt: AWSTimestamp!
  description: String
  likes: Int!
  likedBy: [String]
  duration: Int
}

type Query {
  getUser(id: ID!): User
  getUserByUsername(username: String!): User
  listUsers: [User]
  getPost(id: ID!): Post
  listPosts: [Post]
  listPostsByUser(userId: ID!): [Post]
  getTimelapse(id: ID!): Timelapse
  listTimelapses: [Timelapse]
  listTimelapsesByUser(userId: ID!): [Timelapse]
  getFollowers(userId: ID!): [User]
  getFollowing(userId: ID!): [User]
  listFollowedPosts(userId: ID!, limit: Int, nextToken: String): [Post]
  listTimelapseItems(userId: ID, limit: Int, nextToken: String): TimelapseItemConnection

  # Seller verification queries
  getSellerVerification(userId: ID!): SellerVerification
  listSellerVerifications(status: String, limit: Int, nextToken: String): SellerVerificationConnection
  
  # Product queries
  getUserProducts(sellerId: ID!): [Product]
  getProduct(id: ID!): Product
  getAllProducts(limit: Int, nextToken: String): ProductConnection
  getVerifiedSellersProducts(limit: Int, nextToken: String): ProductConnection
  getSellerDetails(sellerId: ID!): SellerDetails
  
  # Following-based queries for personalized experience
  getFollowedSellers(userId: ID!): [User]
  isFollowing(followerId: ID!, followingId: ID!): Boolean
  getFollowedSellerProducts(userId: ID!, limit: Int, nextToken: String): ProductConnection
  
  # Bulk user operations
  getUsersByIds(ids: [ID!]!): [User]
  getUserActivities(userId: ID!, limit: Int, nextToken: String): ActivityConnection
  searchUsers(query: String!, limit: Int): [User]
  
  # Bulk data operations
  getTimelapsesByIds(ids: [ID!]!): [TimelapseItem]
  bulkGetInteractions(postIds: [ID!]!, type: String): [Interaction]
  getMultipleUserTimelapses(userIds: [ID!]!, limit: Int): [UserTimelapseResult]
}

type ActivityConnection {
  items: [Activity]
  nextToken: String
}

type Activity {
  id: ID!
  type: String!
  timestamp: String!
  data: AWSJSON
}

type TimelapseItemConnection {
  items: [TimelapseItem]
  nextToken: String
}

type Mutation {
  createUser(username: String!, name: String, bio: String, avatar: String): User
  updateUser(id: ID!, username: String, name: String, bio: String, avatar: String): User
  deleteUser(id: ID!): Boolean
  
  followUser(followerId: ID!, followingId: ID!): Follow
  unfollowUser(followerId: ID!, followingId: ID!): Boolean
  
  createPost(authorId: ID!, content: String, media: String): Post
  updatePost(id: ID!, content: String, media: String): Post
  deletePost(id: ID!): Boolean
  likePost(id: ID!): Post
  
  createComment(postId: ID!, authorId: ID!, content: String!): Comment
  updateComment(id: ID!, content: String!): Comment
  deleteComment(id: ID!): Boolean
  
  createTimelapse(creatorId: ID!, title: String, description: String, videoUrl: String, thumbnailUrl: String, tags: [String]): Timelapse
  updateTimelapse(id: ID!, title: String, description: String, videoUrl: String, thumbnailUrl: String, tags: [String]): Timelapse
  deleteTimelapse(id: ID!): Boolean
  likeTimelapse(id: ID!): Timelapse
  viewTimelapse(id: ID!): Timelapse
  
  # Generate a presigned URL for S3 uploads
  generatePresignedUrl(fileName: String!, fileType: String!, userId: String): PresignedUrlResponse
  createTimelapseItem(input: CreateTimelapseItemInput!): TimelapseItem
  updateTimelapseItem(input: UpdateTimelapseItemInput!): TimelapseItem
  deleteTimelapseItem(input: DeleteTimelapseItemInput!): TimelapseItem
  
  # Seller verification operations
  saveSellerVerification(input: SaveSellerVerificationInput!): SellerVerification
  updateSellerVerificationStatus(input: UpdateSellerVerificationStatusInput!): SellerVerification
  sendSellerVerificationEmail(
    businessName: String!, 
    businessEmail: String!, 
    userId: String!, 
    verificationDetails: AWSJSON!
  ): SellerVerificationEmailResponse
  
  # Product operations
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(id: ID!): Boolean
  updateProductInventory(input: UpdateInventoryInput!): InventoryUpdate
  
  # Batch operations
  batchUpdateLikes(inputs: [BatchLikeInput!]!): BatchOperationResult
  batchCreateComments(inputs: [CommentInput!]!): BatchCommentResult
  batchIncrementViews(targetIds: [ID!]!): BatchOperationResult
}

# Response type for presigned URL generation
type PresignedUrlResponse {
  uploadUrl: String!
  fileUrl: String!
  key: String!
}

input CreateTimelapseItemInput {
  userId: ID!
  mediaUrl: String!
  type: String!
  createdAt: AWSTimestamp!
  description: String
  likes: Int!
  likedBy: [String]
  duration: Int
}

input UpdateTimelapseItemInput {
  id: ID!
  likes: Int
  likedBy: [String]
  description: String
}

input DeleteTimelapseItemInput {
  id: ID!
}

input BatchLikeInput {
  targetId: ID!
  userIds: [ID!]!
}

input CommentInput {
  targetId: ID!
  userId: ID!
  content: String!
}

type UserTimelapseResult {
  userId: ID!
  timelapseIds: [ID!]!
}

type Interaction {
  id: ID!
  userId: ID!
  targetId: ID!
  type: String!
  content: String
  createdAt: AWSTimestamp!
}

type BatchOperationResult {
  successCount: Int!
  failedIds: [ID!]
}

type BatchCommentResult {
  successCount: Int!
  failedComments: [CommentFailure!]
}

type CommentFailure {
  targetId: ID!
  userId: ID!
  reason: String
}

extend type Subscription {
  onCreateTimelapseItem(userId: ID): TimelapseItem
    @aws_subscribe(mutations: ["createTimelapseItem"])
  
  # Add missing subscriptions for timelapses
  onUpdateTimelapseItem(id: ID): TimelapseItem
    @aws_subscribe(mutations: ["updateTimelapseItem"])
  
  onDeleteTimelapseItem(id: ID): TimelapseItem
    @aws_subscribe(mutations: ["deleteTimelapseItem"])
  
  # For social features
  onCreateComment(postId: ID): Comment
    @aws_subscribe(mutations: ["createComment"])
  
  onLikeTimelapse(id: ID): Timelapse
    @aws_subscribe(mutations: ["likeTimelapse"])
    
  onCreatePost(authorId: ID): Post
    @aws_subscribe(mutations: ["createPost"])
    
  # For seller verification
  onUpdateSellerVerification(userId: ID): SellerVerification
    @aws_subscribe(mutations: ["saveSellerVerification"])
  
  # Product subscriptions for live inventory updates
  onCreateProduct: Product
    @aws_subscribe(mutations: ["createProduct"])
  
  onUpdateProduct(id: ID): Product
    @aws_subscribe(mutations: ["updateProduct"])
  
  onDeleteProduct(id: ID): Product
    @aws_subscribe(mutations: ["deleteProduct"])
  
  # Category-specific product updates
  onProductsByCategory(category: String!): Product
    @aws_subscribe(mutations: ["createProduct", "updateProduct"])
  
  # Seller-specific product updates for Local Shop
  onSellerProducts(sellerId: ID!): Product
    @aws_subscribe(mutations: ["createProduct", "updateProduct", "deleteProduct"])
  
  # Following-based subscriptions for personalized updates
  onFollowedSellerProducts(followerId: ID!): Product
    @aws_subscribe(mutations: ["createProduct", "updateProduct", "deleteProduct"])
  
  onFollowedSellerInventory(followerId: ID!): InventoryUpdate
    @aws_subscribe(mutations: ["updateProductInventory"])
  
  # Inventory-specific updates
  onInventoryUpdate(productId: ID): InventoryUpdate
    @aws_subscribe(mutations: ["updateProductInventory"])
}

# Update schema definition to include Subscription
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# Add SellerVerification type
type SellerVerification {
  id: ID!
  userId: ID!
  businessName: String!
  businessType: String!
  taxId: String!
  businessAddress: AWSJSON!
  contactInfo: AWSJSON!
  businessDescription: String!
  categories: [String!]!
  status: String!  # "pending", "approved", "rejected"
  reviewNotes: String
  createdAt: String!
  updatedAt: String
}

# Add SellerVerificationEmail response type
type SellerVerificationEmailResponse {
  success: Boolean!
  messageId: String
}

# Add input type for seller verification
input SaveSellerVerificationInput {
  userId: ID!
  businessName: String!
  businessType: String!
  taxId: String!
  businessAddress: AWSJSON!
  contactInfo: AWSJSON!
  businessDescription: String!
  categories: [String!]!
  status: String!
  estimatedAnnualRevenue: String
  socialMedia: AWSJSON
  businessDocuments: AWSJSON!
  termsAccepted: Boolean!
  privacyPolicyAccepted: Boolean!
}

# Add input type for updating seller verification status
input UpdateSellerVerificationStatusInput {
  userId: ID!
  status: String!
  reviewNotes: String
  updatedAt: String!
}

# Add connection type for pagination
type SellerVerificationConnection {
  items: [SellerVerification]
  nextToken: String
}

# Product type for marketplace
type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  images: [String!]!
  category: String!
  sellerId: ID!
  createdAt: String!
  updatedAt: String!
  isActive: Boolean!
  inventory: Int
}

# Input for creating products
input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  images: [String!]!
  category: String!
  sellerId: ID!
  inventory: Int
}

# Input for updating products
input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Float
  images: [String!]
  category: String
  inventory: Int
  isActive: Boolean
}

# Input for inventory updates
input UpdateInventoryInput {
  productId: ID!
  newInventory: Int!
  change: Int!
  reason: String
}

# Inventory update type for subscriptions
type InventoryUpdate {
  productId: ID!
  oldInventory: Int!
  newInventory: Int!
  change: Int!
  reason: String
  timestamp: String!
  sellerId: ID!
}

# Connection type for product pagination
type ProductConnection {
  items: [Product]
  nextToken: String
}

# Enhanced Product type with seller info for marketplace
type ProductWithSeller {
  id: ID!
  name: String!
  description: String!
  price: Float!
  images: [String!]!
  category: String!
  sellerId: ID!
  sellerName: String
  sellerVerified: Boolean!
  businessName: String
  createdAt: String!
  updatedAt: String!
  isActive: Boolean!
  inventory: Int
}

# Seller details for products
type SellerDetails {
  id: ID!
  name: String
  email: String
  verified: Boolean!
  businessName: String
  businessType: String
  status: String
}
